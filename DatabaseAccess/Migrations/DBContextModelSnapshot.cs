// <auto-generated />
using System;
using DatabaseAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace DatabaseAccess.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<string>("NewValueStr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValueStr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("old_value");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Table", "TableKey", "OldValueStr", "NewValueStr" });

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("table");

                    b.Property<string>("TableKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("table_key");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("Table");

                    b.HasIndex("UserId");

                    b.ToTable("admin_audit_log");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminBaseConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("config_key");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.Property<string>("ValueStr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("JSON")
                        .HasColumnName("value")
                        .HasDefaultValueSql("'{}'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ConfigKey" }, "IX_admin_base_config_config_key")
                        .IsUnique()
                        .HasFilter("(status) <> 'Disabled'");

                    b.ToTable("admin_base_config");

                    b.HasCheckConstraint("CK_admin_base_config_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfigKey = "AdminUserLoginConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"number_of_times_allow_login_failure\": 5,\r\n  \"lock_time\": 360\r\n}"
                        },
                        new
                        {
                            Id = 2,
                            ConfigKey = "SocialUserLoginConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"number_of_times_allow_login_failure\": 5,\r\n  \"lock_time\": 360\r\n}"
                        },
                        new
                        {
                            Id = 3,
                            ConfigKey = "SessionAdminUserConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"expiry_time\": 5,\r\n  \"extension_time\": 5\r\n}"
                        },
                        new
                        {
                            Id = 4,
                            ConfigKey = "SessionSocialUserConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"expiry_time\": 5,\r\n  \"extension_time\": 5\r\n}"
                        },
                        new
                        {
                            Id = 5,
                            ConfigKey = "EmailClientConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"limit_sender\": 5,\r\n  \"template_user_signup\": \"<p>Dear @Model.UserName,</p>\\r\\n                                        <p>Confirm link here: <a href='@Model.ConfirmLink'>@Model.ConfirmLink</a><br>\\r\\n                                        Send datetime: @Model.DateTimeSend</p>\\r\\n                                        <p>Thanks for your register.</p>\"\r\n}"
                        },
                        new
                        {
                            Id = 6,
                            ConfigKey = "SocialUserConfirmConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"expiry_time\": 2880,\r\n  \"number_of_times_allow_confirm_failure\": 3,\r\n  \"prefix_url\": \"/auth/confirm-account\",\r\n  \"host_name\": \"http://localhost:4200\"\r\n}"
                        },
                        new
                        {
                            Id = 7,
                            ConfigKey = "UIConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{}"
                        },
                        new
                        {
                            Id = 8,
                            ConfigKey = "PublicConfig",
                            StatusStr = "Enabled",
                            ValueStr = "{\r\n  \"UIConfig\": \"all\",\r\n  \"SessionAdminUserConfig\": \"all\",\r\n  \"SessionSocialUserConfig\": \"all\",\r\n  \"UploadFileConfig\": \"all\"\r\n}"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastAccessTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_access_timestamp");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("salt")
                        .HasDefaultValueSql("SUBSTRING(REPLACE(CAST(gen_random_uuid() AS VARCHAR), '-', ''), 1, 8)");

                    b.Property<string>("SettingsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("settings")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Activated'");

                    b.Property<string>("StorePassword")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName", "Email" }, "IX_admin_user_user_name_email")
                        .IsUnique()
                        .HasFilter("(status) <> 'Deleted'");

                    b.ToTable("admin_user");

                    b.HasCheckConstraint("CK_admin_user_status_valid_value", "status = 'Activated' OR status = 'Blocked' OR status = 'Deleted' OR status = 'Readonly'");

                    b.HasCheckConstraint("CK_admin_user_last_access_timestamp_valid_value", "(last_access_timestamp IS NULL) OR (last_access_timestamp > created_timestamp)");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1afc27e9-85c3-4e48-89ab-dd997621ab32"),
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            DisplayName = "Administrator",
                            Email = "admin@admin",
                            Salt = "5b8f88a6",
                            SettingsStr = "{}",
                            StatusStr = "Readonly",
                            StorePassword = "E6D2B26A29B297BC60A28C891ABAC464",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("describe");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("RightName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("right_name");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RightName" }, "IX_admin_user_right_right_name")
                        .IsUnique()
                        .HasFilter("(status) <> 'Disabled'");

                    b.ToTable("admin_user_right");

                    b.HasCheckConstraint("CK_admin_user_right_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Describe = "Can access Homepage and see statistic.",
                            DisplayName = "Dashboard",
                            RightName = "dashboard",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 2,
                            Describe = "Add, create, disable category.",
                            DisplayName = "Category",
                            RightName = "category",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 3,
                            Describe = "Add, create, disable topics",
                            DisplayName = "Topic",
                            RightName = "topic",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 4,
                            Describe = "Add, create, disable tag.",
                            DisplayName = "Tag",
                            RightName = "tag",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 5,
                            Describe = "Review, accept, reject post. See report about post.",
                            DisplayName = "Post",
                            RightName = "post",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 6,
                            Describe = "Delete comment. See report about comment.",
                            DisplayName = "Comment",
                            RightName = "comment",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 7,
                            Describe = "Configure security of Server.",
                            DisplayName = "Security",
                            RightName = "security",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 8,
                            Describe = "Block, unblock SocialUser",
                            DisplayName = "Social User",
                            RightName = "social_user",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 9,
                            Describe = "Add, block, unblock, delete AdminUser.",
                            DisplayName = "Admin User",
                            RightName = "admin_user",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 10,
                            Describe = "See and tracking log file.",
                            DisplayName = "Log",
                            RightName = "log",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 11,
                            Describe = "Modify, get config of server.",
                            DisplayName = "Config",
                            RightName = "config",
                            StatusStr = "Enabled"
                        },
                        new
                        {
                            Id = 12,
                            Describe = "Upload files.",
                            DisplayName = "Upload",
                            RightName = "upload",
                            StatusStr = "Enabled"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("describe");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean")
                        .HasColumnName("priority");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleName" }, "IX_admin_user_role_role_name")
                        .IsUnique()
                        .HasFilter("(status) <> 'Disabled'");

                    b.ToTable("admin_user_role");

                    b.HasCheckConstraint("CK_admin_user_role_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Describe = "Administrator",
                            DisplayName = "Administrator",
                            Priority = false,
                            RoleName = "admin",
                            StatusStr = "Readonly"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRoleDetail", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("RightId")
                        .HasColumnType("integer")
                        .HasColumnName("right_id");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'{\r\n  \"read\": false,\r\n  \"write\": false\r\n}'");

                    b.HasKey("RoleId", "RightId");

                    b.HasIndex("RightId");

                    b.ToTable("admin_user_role_detail");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RightId = 1,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 2,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 3,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 4,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 5,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 6,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 7,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 8,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 9,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 10,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 11,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 12,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRoleOfUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("admin_user_role_of_user");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1afc27e9-85c3-4e48-89ab-dd997621ab32"),
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SessionAdminUser", b =>
                {
                    b.Property<string>("SessionToken")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("session_token");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("DataStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("data")
                        .HasDefaultValueSql("'{}'");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_interaction_time");

                    b.Property<bool>("Saved")
                        .HasColumnType("boolean")
                        .HasColumnName("saved");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SessionToken");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SessionToken", "UserId" }, "IX_session_admin_user_token_user_id")
                        .IsUnique();

                    b.ToTable("session_admin_user");

                    b.HasCheckConstraint("CK_session_admin_user_last_interaction_time_valid_value", "(last_interaction_time >= created_timestamp)");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SessionSocialUser", b =>
                {
                    b.Property<string>("SessionToken")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("session_token");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("DataStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("data")
                        .HasDefaultValueSql("'{}'");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_interaction_time");

                    b.Property<bool>("Saved")
                        .HasColumnType("boolean")
                        .HasColumnName("saved");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SessionToken");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SessionToken", "UserId" }, "IX_session_social_user_token_user_id")
                        .IsUnique();

                    b.ToTable("session_social_user");

                    b.HasCheckConstraint("CK_session_social_user_last_interaction_time_valid_value", "(last_interaction_time >= created_timestamp)");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<string>("NewValueStr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValueStr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("old_value");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Table", "TableKey", "OldValueStr", "NewValueStr" });

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("table");

                    b.Property<string>("TableKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("table_key");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("Table");

                    b.HasIndex("UserId");

                    b.ToTable("social_audit_log");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("describe");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<DateTime?>("LastModifiedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "DisplayName", "Describe" });

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex(new[] { "Slug" }, "IX_social_category_slug")
                        .IsUnique()
                        .HasFilter("(status) <> 'Disabled'");

                    b.ToTable("social_category");

                    b.HasCheckConstraint("CK_social_category_last_modified_timestamp_valid_value", "(last_modified_timestamp IS NULL) OR (last_modified_timestamp > created_timestamp)");

                    b.HasCheckConstraint("CK_social_category_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "This not a bug this a feature",
                            DisplayName = "Technology",
                            Name = "technology",
                            Slug = "technology",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Do not click to this",
                            DisplayName = "Developer",
                            Name = "developer",
                            Slug = "developer",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Search google to have better solution",
                            DisplayName = "Dicussion",
                            Name = "dicussion",
                            Slug = "dicussion",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Nothing in here",
                            DisplayName = "Blog",
                            Name = "blog",
                            Slug = "blog",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Life die have number",
                            DisplayName = "Left",
                            Name = "left",
                            Slug = "left",
                            StatusStr = "Readonly"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("LastModifiedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Content" });

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Created'");

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIST");

                    b.ToTable("social_comment");

                    b.HasCheckConstraint("CK_social_comment_status_valid_value", "status = 'Created' OR status = 'Edited' OR status = 'Deleted'");

                    b.HasCheckConstraint("CK_social_comment_last_modified_timestamp_valid_value", "(last_modified_timestamp IS NULL) OR (last_modified_timestamp > created_timestamp)");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<Guid?>("ActionOfAdminUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_of_admin_user_id");

                    b.Property<Guid?>("ActionOfUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_of_user_id");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<string>("ContentStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("content")
                        .HasDefaultValueSql("'{}'");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("LastModifiedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<DateTime?>("LastUpdateContent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_content");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Sent'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ActionOfAdminUserId");

                    b.HasIndex("ActionOfUserId");

                    b.HasIndex("CommentId");

                    b.HasIndex("Owner");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("social_notification");

                    b.HasCheckConstraint("CK_social_notification_status_valid_value", "status = 'Sent' OR status = 'Read' OR status = 'Deleted'");

                    b.HasCheckConstraint("CK_social_notification_last_modified_timestamp_valid_value", "(last_modified_timestamp IS NULL) OR (last_modified_timestamp > created_timestamp)");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("ApprovedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_timestamp");

                    b.Property<string>("ContenTypeStr")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("content_type");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentSearch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_search");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("LastModifiedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<string>("PendingContentStr")
                        .HasColumnType("jsonb")
                        .HasColumnName("pending_content");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "ContentSearch", "Title", "ShortContent" });

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_content");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("StatusStr")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Pending'");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.Property<int>("TimeRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("time_read")
                        .HasDefaultValueSql("2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("views")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIST");

                    b.HasIndex(new[] { "Slug" }, "IX_social_post_slug")
                        .IsUnique()
                        .HasFilter("((status = 'Approved' OR status = 'Private') AND (slug <> ''))");

                    b.ToTable("social_post");

                    b.HasCheckConstraint("CK_social_post_content_type_valid_value", "content_type = 'HTML' OR content_type = 'MARKDOWN'");

                    b.HasCheckConstraint("CK_social_post_status_valid_value", "status = 'Pending' OR status = 'Approved' OR status = 'Private' OR status = 'Deleted'");

                    b.HasCheckConstraint("CK_social_post_time_read_valid_value", "time_read >= 2");

                    b.HasCheckConstraint("CK_social_post_last_modified_timestamp_valid_value", "(last_modified_timestamp IS NULL) OR (last_modified_timestamp > created_timestamp)");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPostCategory", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("social_post_category");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPostTag", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("social_post_tag");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("LastModifiedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("ReportType")
                        .HasColumnType("text")
                        .HasColumnName("report_type");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid")
                        .HasColumnName("reporter_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Content" });

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Pending'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("UserId");

                    b.ToTable("social_report");

                    b.HasCheckConstraint("CK_social_report_status_valid_value", "status = 'Pending' OR status = 'Ignored' OR status = 'Handled'");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("describe");

                    b.Property<DateTime?>("LastModifiedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Tag" }, "IX_social_tag_tag")
                        .IsUnique();

                    b.ToTable("social_tag");

                    b.HasCheckConstraint("CK_social_tag_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Angular is a TypeScript-based open-source web application platform led by the Angular Team at Google and by a community of individuals and corporations. Angular is a complete rewrite from the same team that built AngularJS.",
                            Name = "Angular",
                            StatusStr = "Readonly",
                            Tag = "angular"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "React is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications.",
                            Name = "React",
                            StatusStr = "Readonly",
                            Tag = "react"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vue.js is an open-source JavaScript framework for building user interfaces. It is maintained by a community of individual developers and companies. Vue can be used as a base in the development of single-page or mobile applications.",
                            Name = "Vue",
                            StatusStr = "Readonly",
                            Tag = "vue"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Angular CLI is a command-line interface for the Angular development platform. It is used to create and manage projects for the Angular framework.",
                            Name = "Angular CLI",
                            StatusStr = "Readonly",
                            Tag = "angular-cli"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "React Native is a framework for building native apps using React. It is maintained by Facebook and a community of individual developers and companies.",
                            Name = "React Native",
                            StatusStr = "Readonly",
                            Tag = "react-native"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vue CLI is a command-line interface for the Vue.js development platform. It is used to create and manage projects for the Vue framework.",
                            Name = "Vue CLI",
                            StatusStr = "Readonly",
                            Tag = "vue-cli"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Webpack is a module bundler that packs multiple modules with dependencies into a single module. It is maintained by a community of individual developers and companies.",
                            Name = "Webpack",
                            StatusStr = "Readonly",
                            Tag = "webpack"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Gulp is a streaming build system. It is maintained by a community of individual developers and companies.",
                            Name = "Gulp",
                            StatusStr = "Readonly",
                            Tag = "gulp"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Sass is a stylesheet language that is interpreted into Cascading Style Sheets (CSS). It is maintained by a community of individual developers and companies.",
                            Name = "Sass",
                            StatusStr = "Readonly",
                            Tag = "sass"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Less is a stylesheet language that is interpreted into Cascading Style Sheets (CSS). It is maintained by a community of individual developers and companies.",
                            Name = "Less",
                            StatusStr = "Readonly",
                            Tag = "less"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Bootstrap is a free and open-source front-end web framework for designing websites and web applications. It is maintained by a community of individual developers and companies.",
                            Name = "Bootstrap",
                            StatusStr = "Readonly",
                            Tag = "bootstrap"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Material-UI is a React component library that enables you to create beautiful, high-fidelity, mobile-first experiences. It is maintained by a community of individual developers and companies.",
                            Name = "Material-UI",
                            StatusStr = "Readonly",
                            Tag = "material-ui"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Material Design is a design language developed by Google. It is used to create a consistent and beautiful user experience across all products on Android, iOS, and the web.",
                            Name = "Material Design",
                            StatusStr = "Readonly",
                            Tag = "material-design"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Material Icons is a set of open source icons for use in web and mobile applications. It is maintained by a community of individual developers and companies.",
                            Name = "Material Icons",
                            StatusStr = "Readonly",
                            Tag = "material-icons"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Bootstrap Vue is a Vue.js wrapper for Bootstrap. It is maintained by a community of individual developers and companies.",
                            Name = "Bootstrap Vue",
                            StatusStr = "Readonly",
                            Tag = "bootstrap-vue"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vue Router is a routing library for Vue.js. It is maintained by a community of individual developers and companies.",
                            Name = "Vue Router",
                            StatusStr = "Readonly",
                            Tag = "vue-router"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vuex is a state management pattern and library for Vue.js applications. It is maintained by a community of individual developers and companies.",
                            Name = "Vuex",
                            StatusStr = "Readonly",
                            Tag = "vuex"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vue I18n is a localization library for Vue.js. It is maintained by a community of individual developers and companies.",
                            Name = "Vue I18n",
                            StatusStr = "Readonly",
                            Tag = "vue-i18n"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vue Resource is a REST client for Vue.js. It is maintained by a community of individual developers and companies.",
                            Name = "Vue Resource",
                            StatusStr = "Readonly",
                            Tag = "vue-resource"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Vue Router I18n is a localization library for Vue Router. It is maintained by a community of individual developers and companies.",
                            Name = "Vue Router I18n",
                            StatusStr = "Readonly",
                            Tag = "vue-router-i18n"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = ".NET is a programming language and runtime environment developed by Microsoft. It is maintained by a community of individual developers and companies.",
                            Name = ".NET",
                            StatusStr = "Readonly",
                            Tag = "dotnet"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "C# is a programming language and runtime environment developed by Microsoft. It is maintained by a community of individual developers and companies.",
                            Name = "CSharp",
                            StatusStr = "Readonly",
                            Tag = "csharp"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "ASP.NET is a web application framework developed by Microsoft. It is maintained by a community of individual developers and companies.",
                            Name = "ASP.NET",
                            StatusStr = "Readonly",
                            Tag = "aspnet"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "ASP.NET Core is a web application framework developed by Microsoft. It is maintained by a community of individual developers and companies.",
                            Name = "ASP.NET Core",
                            StatusStr = "Readonly",
                            Tag = "aspnet-core"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "Next.js is a JavaScript framework for building web applications. It is maintained by a community of individual developers and companies.",
                            Name = "Next.js",
                            StatusStr = "Readonly",
                            Tag = "nextjs"
                        },
                        new
                        {
                            Id = 26L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "React Router is a routing library for React. It is maintained by a community of individual developers and companies.",
                            Name = "React Router",
                            StatusStr = "Readonly",
                            Tag = "react-router"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedTimestamp = new DateTime(2022, 2, 20, 6, 13, 13, 0, DateTimeKind.Utc),
                            Describe = "React Router DOM is a routing library for React. It is maintained by a community of individual developers and companies.",
                            Name = "React Router DOM",
                            StatusStr = "Readonly",
                            Tag = "react-router-dom"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastAccessTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_access_timestamp");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Province")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("province");

                    b.Property<string>("PublicsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("publics")
                        .HasDefaultValueSql("'[]'");

                    b.Property<string>("RanksStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("ranks")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("salt")
                        .HasDefaultValueSql("SUBSTRING(REPLACE(CAST(gen_random_uuid() AS VARCHAR), '-', ''), 1, 8)");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "DisplayName", "UserName" });

                    b.Property<string>("SettingsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("settings")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sex");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Activated'");

                    b.Property<string>("StorePassword")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.Property<bool>("VerifiedEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("verified_email");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIST");

                    b.HasIndex(new[] { "UserName", "Email" }, "IX_social_user_user_name_email")
                        .IsUnique()
                        .HasFilter("(status) <> 'Deleted'");

                    b.ToTable("social_user");

                    b.HasCheckConstraint("CK_social_report_status_valid_value", "status = 'Activated' OR status = 'Deleted' OR status = 'Blocked'");

                    b.HasCheckConstraint("CK_social_user_last_access_timestamp_valid_value", "(last_access_timestamp IS NULL) OR (last_access_timestamp > created_timestamp)");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithCategory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'[]'");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("social_user_action_with_category");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'[]'");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("social_user_action_with_comment");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithPost", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'[]'");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("social_user_action_with_post");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithTag", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'[]'");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("social_user_action_with_tag");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserIdDes")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id_des");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'[]'");

                    b.HasKey("UserId", "UserIdDes");

                    b.HasIndex("UserIdDes");

                    b.ToTable("social_user_action_with_user");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<Guid?>("AdminUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("amin_user_id");

                    b.Property<string>("NewValueStr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValueStr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("old_value");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Table", "TableKey", "OldValueStr", "NewValueStr" });

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("table");

                    b.Property<string>("TableKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("table_key");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("Table");

                    b.HasIndex("UserId");

                    b.ToTable("social_user_audit_log");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("describe");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("RightName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("right_name");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RightName" }, "IX_social_user_right_right_name")
                        .IsUnique()
                        .HasFilter("(status) <> 'Disabled'");

                    b.ToTable("social_user_right");

                    b.HasCheckConstraint("CK_social_user_right_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Describe = "Can create, interactive posts.",
                            DisplayName = "Post",
                            RightName = "post",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 2,
                            Describe = "Can create, interactive comment.",
                            DisplayName = "Comment",
                            RightName = "comment",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 3,
                            Describe = "Can create, interactive report.",
                            DisplayName = "Report",
                            RightName = "report",
                            StatusStr = "Readonly"
                        },
                        new
                        {
                            Id = 4,
                            Describe = "Can create, interactive report.",
                            DisplayName = "Upload",
                            RightName = "upload",
                            StatusStr = "Readonly"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("describe");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean")
                        .HasColumnName("priority");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<string>("StatusStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Enabled'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleName" }, "IX_social_user_role_role_name")
                        .IsUnique()
                        .HasFilter("(status) <> 'Disabled'");

                    b.ToTable("social_user_role");

                    b.HasCheckConstraint("CK_social_user_role_status_valid_value", "status = 'Enabled' OR status = 'Disabled' OR status = 'Readonly'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Describe = "Normal user",
                            DisplayName = "User",
                            Priority = false,
                            RoleName = "user",
                            StatusStr = "Readonly"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRoleDetail", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("RightId")
                        .HasColumnType("integer")
                        .HasColumnName("right_id");

                    b.Property<string>("ActionsStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("actions")
                        .HasDefaultValueSql("'{\r\n  \"read\": false,\r\n  \"write\": false\r\n}'");

                    b.HasKey("RoleId", "RightId");

                    b.HasIndex("RightId");

                    b.ToTable("social_user_role_detail");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RightId = 1,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 2,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 3,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        },
                        new
                        {
                            RoleId = 1,
                            RightId = 4,
                            ActionsStr = "{\r\n  \"read\": true,\r\n  \"write\": true\r\n}"
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRoleOfUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("social_user_role_of_user");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminAuditLog", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUser", "User")
                        .WithMany("AdminAuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_admin_audit_log_user_id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRoleDetail", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUserRight", "Right")
                        .WithMany("AdminUserRoleDetails")
                        .HasForeignKey("RightId")
                        .HasConstraintName("FK_admin_user_role_detail_right")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.AdminUserRole", "Role")
                        .WithMany("AdminUserRoleDetails")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_admin_user_role_detail_role")
                        .IsRequired();

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRoleOfUser", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUserRole", "Role")
                        .WithMany("AdminUserRoleOfUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_admin_user_role_of_user_role")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.AdminUser", "User")
                        .WithMany("AdminUserRoleOfUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_admin_user_role_of_user_user")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SessionAdminUser", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUser", "User")
                        .WithMany("SessionAdminUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_session_admin_user_user_id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SessionSocialUser", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SessionSocialUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_session_social_user_user_id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialAuditLog", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUser", "User")
                        .WithMany("SocialAuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_audit_log_user_id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialCategory", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_social_category_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialComment", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "OwnerNavigation")
                        .WithMany("SocialComments")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_social_comment_user_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialComment", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_social_comment_parent");

                    b.HasOne("DatabaseAccess.Context.Models.SocialPost", "Post")
                        .WithMany("SocialComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_social_comment_post")
                        .IsRequired();

                    b.Navigation("OwnerNavigation");

                    b.Navigation("Parent");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialNotification", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUser", "ActionOfAdminUserIdNavigation")
                        .WithMany("SocialNotificationActionOfAdminUserIdNavigations")
                        .HasForeignKey("ActionOfAdminUserId")
                        .HasConstraintName("FK_social_notification_action_of_amdin_user_id");

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "ActionOfUserIdNavigation")
                        .WithMany("SocialNotificationActionOfUserIdNavigations")
                        .HasForeignKey("ActionOfUserId")
                        .HasConstraintName("FK_social_notification_action_of_user_id");

                    b.HasOne("DatabaseAccess.Context.Models.SocialComment", "Comment")
                        .WithMany("SocialNotifications")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_social_notification_comment_id");

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "OwnerNavigation")
                        .WithMany("SocialNotifications")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_social_notification_user_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialPost", "Post")
                        .WithMany("SocialNotifications")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_social_notification_post_id");

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "UserIdDesNavigation")
                        .WithMany("SocialNotificationUserIdNavigations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_notification_user_id_des");

                    b.Navigation("ActionOfAdminUserIdNavigation");

                    b.Navigation("ActionOfUserIdNavigation");

                    b.Navigation("Comment");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("Post");

                    b.Navigation("UserIdDesNavigation");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPost", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "OwnerNavigation")
                        .WithMany("SocialPosts")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_social_post_user_id")
                        .IsRequired();

                    b.Navigation("OwnerNavigation");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPostCategory", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialCategory", "Category")
                        .WithMany("SocialPostCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_social_post_category_category")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialPost", "Post")
                        .WithMany("SocialPostCategories")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_social_post_category_post")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPostTag", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialPost", "Post")
                        .WithMany("SocialPostTags")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_social_post_tag_post")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialTag", "Tag")
                        .WithMany("SocialPostTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_social_post_tag_tag")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialReport", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialComment", "Comment")
                        .WithMany("SocialReports")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_social_report_comment");

                    b.HasOne("DatabaseAccess.Context.Models.SocialPost", "Post")
                        .WithMany("SocialReports")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_social_report_post");

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialReports")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_report_user_id");

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithCategory", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialCategory", "Category")
                        .WithMany("SocialUserActionWithCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_social_user_action_with_category_category_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserActionWithCategories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_action_with_category_user_id")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithComment", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialComment", "Comment")
                        .WithMany("SocialUserActionWithComments")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_social_user_action_with_comment_comment_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserActionWithComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_action_with_comment_user_id")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithPost", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialPost", "Post")
                        .WithMany("SocialUserActionWithPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_social_user_action_with_post_post_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserActionWithPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_action_with_post_user_id")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithTag", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialTag", "Tag")
                        .WithMany("SocialUserActionWithTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_social_user_action_with_tag_tag_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserActionWithTags")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_action_with_tag_user_id")
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserActionWithUser", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserActionWithUserUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_action_with_user_user_id")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "UserIdDesNavigation")
                        .WithMany("SocialUserActionWithUserUserIdDesNavigations")
                        .HasForeignKey("UserIdDes")
                        .HasConstraintName("FK_social_user_action_with_user_user_id_des")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserIdDesNavigation");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserAuditLog", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.AdminUser", "UserAdmin")
                        .WithMany("SocialUserAuditLogs")
                        .HasForeignKey("AdminUserId")
                        .HasConstraintName("FK_social_user_audit_log_admin_user_id");

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserAuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_audit_log_user_id")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserAdmin");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRoleDetail", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialUserRight", "Right")
                        .WithMany("SocialUserRoleDetails")
                        .HasForeignKey("RightId")
                        .HasConstraintName("FK_social_user_role_detail_right")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUserRole", "Role")
                        .WithMany("SocialUserRoleDetails")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_social_user_role_detail_role")
                        .IsRequired();

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRoleOfUser", b =>
                {
                    b.HasOne("DatabaseAccess.Context.Models.SocialUserRole", "Role")
                        .WithMany("SocialUserRoleOfUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_social_user_role_of_user_role")
                        .IsRequired();

                    b.HasOne("DatabaseAccess.Context.Models.SocialUser", "User")
                        .WithMany("SocialUserRoleOfUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_social_user_role_of_user_user")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUser", b =>
                {
                    b.Navigation("AdminAuditLogs");

                    b.Navigation("AdminUserRoleOfUsers");

                    b.Navigation("SessionAdminUsers");

                    b.Navigation("SocialAuditLogs");

                    b.Navigation("SocialNotificationActionOfAdminUserIdNavigations");

                    b.Navigation("SocialUserAuditLogs");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRight", b =>
                {
                    b.Navigation("AdminUserRoleDetails");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.AdminUserRole", b =>
                {
                    b.Navigation("AdminUserRoleDetails");

                    b.Navigation("AdminUserRoleOfUsers");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("SocialPostCategories");

                    b.Navigation("SocialUserActionWithCategories");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialComment", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("SocialNotifications");

                    b.Navigation("SocialReports");

                    b.Navigation("SocialUserActionWithComments");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialPost", b =>
                {
                    b.Navigation("SocialComments");

                    b.Navigation("SocialNotifications");

                    b.Navigation("SocialPostCategories");

                    b.Navigation("SocialPostTags");

                    b.Navigation("SocialReports");

                    b.Navigation("SocialUserActionWithPosts");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialTag", b =>
                {
                    b.Navigation("SocialPostTags");

                    b.Navigation("SocialUserActionWithTags");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUser", b =>
                {
                    b.Navigation("SessionSocialUsers");

                    b.Navigation("SocialComments");

                    b.Navigation("SocialNotificationActionOfUserIdNavigations");

                    b.Navigation("SocialNotifications");

                    b.Navigation("SocialNotificationUserIdNavigations");

                    b.Navigation("SocialPosts");

                    b.Navigation("SocialReports");

                    b.Navigation("SocialUserActionWithCategories");

                    b.Navigation("SocialUserActionWithComments");

                    b.Navigation("SocialUserActionWithPosts");

                    b.Navigation("SocialUserActionWithTags");

                    b.Navigation("SocialUserActionWithUserUserIdDesNavigations");

                    b.Navigation("SocialUserActionWithUserUsers");

                    b.Navigation("SocialUserAuditLogs");

                    b.Navigation("SocialUserRoleOfUsers");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRight", b =>
                {
                    b.Navigation("SocialUserRoleDetails");
                });

            modelBuilder.Entity("DatabaseAccess.Context.Models.SocialUserRole", b =>
                {
                    b.Navigation("SocialUserRoleDetails");

                    b.Navigation("SocialUserRoleOfUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
